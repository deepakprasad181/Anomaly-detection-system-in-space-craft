
https://chat.openai.com/share/cf10828a-b51a-4603-b02f-4c91bbb9956e

https://chat.openai.com/share/cf10828a-b51a-4603-b02f-4c91bbb9956e


import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

Sample dataset
data = np.array([
    [10, 20, 30, 40, 50],
    [15, 25, 35, 45, 55],
    [12, 22, 32, 42, 52],
    [13, 23, 33, 43, 53],
    [11, 21, 31, 41, 51]
])

Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

Define window size for sequence data
time_steps = 1

Prepare data for LSTM
X, y = [], []
for i in range(len(scaled_data) - time_steps):
    X.append(scaled_data[i:i+time_steps])
    y.append(scaled_data[i+time_steps])
X, y = np.array(X), np.array(y)

Reshape data for LSTM [samples, time steps, features]
X = np.reshape(X, (X.shape[0], X.shape[1], X.shape[2]))

Define LSTM model
model = Sequential()
model.add(LSTM(units=64, input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(units=data.shape[1]))  # Output layer with same number of features as input
model.compile(optimizer='adam', loss='mse')

Train the model
model.fit(X, y, epochs=10, batch_size=1)

Predictions
predictions = model.predict(X)

Calculate reconstruction error
reconstruction_errors = np.mean(np.abs(predictions - y), axis=1)

Set threshold for anomaly detection
threshold = 0.1

Detect anomalies
anomaly_indices = np.where(reconstruction_errors > threshold)[0]

Visualize anomalies
plt.figure(figsize=(10, 6))
for i in range(data.shape[1]):
    plt.plot(data[:, i], label='param{}'.format(i+1))
if len(anomaly_indices) > 0:
    plt.scatter(anomaly_indices, data[anomaly_indices, 0], color='red', label='Anomalies')
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Anomaly Detection Plot')
plt.legend()
plt.grid(True)
plt.show()

print("Anomaly indices:", anomaly_indices)
